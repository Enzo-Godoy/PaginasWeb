CSS Flexvox Challenges 
A website's User interface("UI") has two componenents. 
First, there are the visual elements.
Second, there is the placement or positioning of thoses elements. 
In Responsive Web Design, a ui layout must accomodate many differente browsers and devices accessing the content. 

CSS3 introduced Flexible Boxes, or flexbox, to create page layoutes for a dynamin UI. It is a layour mode that arranges elements in a predictable way for different screen sizes and browsers. 
-- All popular modern browsers support flexbox. 

------------------- 0 ------------------------------------

Flex to positioning something. 
Placing the CSS property display:flex; on an element allows us to used other flex properties to build a responsive page.



example: 

element { display:flex}


When we add it to several componenents in the tweet embed we can start adjusting their positioning. 

Adding display: flex to an element turns it into a flex container . 
This makes it possible to align any children of that element into rows or columns. 
You do this by adding the flex-direction property to the parent item and setting it to row or column. 

-- Other options for flex-direction are row-reverse and column reverse. 
 
 // The dafault value for the flex-direction property is row. 


 The header and footer have child items that could be arranged as rows using the flex-direction property. 


flex-direction property set children's element to a column or row. 
Also we can create a column by vertically stacking the children of a flex container. 

--------------------------------------------------------------------------

Sometimes the flex items within a flex container don't fill all the space in the container. 


/* Align and space out the flex items a certain way. 
justify-content !-- has option to do this *



Main axis : 
For a row, this is a horizontal line that cuts through each item.  
And for a column, the main axis is a vertical line through the items. 

A bunch of option 



justify-content : center ;  // Most usually used. 

Other options 
 
  element {
   /*   Aligns items to the start of the flex container. 
        For a row- left. 
        For a column-top
       flex-start:;
   */

   /*   Aligns items to the end of the flex container. 
        For a row- right. 
        For a column-bottom.
       flex-end;
   */

   /*   Align items to the center of the main axis, with extra space placed between the items. 
   The first and last items are pushed to the very edge of the flex container.
      space-between; 
   */

   /*  Align items to the center of the main axis, with extra space placed between the items.  The first and last items are not locked to the edges of the container; the space is tributed around all the items.    
   space-around;
   */



  }



The align-items property is similar to justify-content. 
   // The justify-content property aligned flex items along the main axis. 

Flex containers also have a cross axis wich is the opposite of the main axis. 

In align-itens to align items we use the cross axis. 
For a row (up or down). 
For a column (left or right). 

The different values available for align-items include : 

* flex-start
* flex-end
* center 
* stretch 
* baseline 




Use the flex-wrap property to wrap a row or column 

CSS flexbox has a feature to split a flex item into multiple rows (or columns).
By default, a flex container will fit all flex items together. 

Using the flex-wrap property, it tells css to wrap items. 
this means extra items move into a new row or column. 
The break point of where the wrapping happens depends on the size of the items and the size of the container .

CSS also has options for the direction of the wrap : 

*nowrap. 
*wrap.
*wrap-reverse.


Flex container(The parent of the flex items). 
There are several useful properties for the flex items. 
The first is the flex-shrink property. 

When it's used, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths  of ll the flex items within it. 

//The flex-shrink property takes numbers as values. 
The higher the number, the more it will shrink compared to the other items in the container. 



Use the flex-grow property to expand items. 

The opposie of flex-shrink is the flex-grow property. 
Recall the flex-shrink controls the size of the items when the container shrinks. 
The flex-grow propert controls the size of items when the parent container expands.  



The flex-basis property specifies the initial size of the item before CSS amkes adjustments with flex-shrink or flex-grow. 

The units used by the flex-basis property are the same as other prop. 
(px, em, %, etc)

 // The value auto sizes items based on the content. 



  Flex shorthand property
  There is a shortcut available to set several flex properties at once. 
  The flex-grow, flex-shrink, and flex-basis properties all be set together by using the flex property. 

  element {
  flex: fgv fsv fbv;
  flex : 0 1 2; 
    /* This make a value of 0 for flex-grow, 1 for flex-shrink, 2 for flex-basis.
  }



  The default property settings are 
	  elem {
	    flex: 0 1 auto;
	  }



	  The order property is used to tell css the order of how flex items appear in the flex container. By default, items will appear in the same order they come in the source HTMl . 
	  The property takes numbers as values, and negative numbers can be used.




	  The final property for flex items is align -self. 
	  This ´rpérty allows us to adjust each item's alignment individually, instead of setting them at once. 
	  This is useful since other common adjustment techniques using the CSS properties float,clear, and vertical-align don't work on flex items. 

	  align-selg accepts the same values as aslign-items and will override any value set by the align-items property. 
	  



